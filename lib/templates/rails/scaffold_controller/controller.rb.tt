<% if namespaced? -%>
require_dependency "<%= namespaced_path %>/application_controller"

<% end -%>
# frozen_string_literal: true

<% module_namespacing do -%>
class <%= controller_class_name %>Controller < ApplicationController
  before_action :set_<%= singular_table_name %>, only: %i[show edit update destroy]

  # GET <%= route_url %>
  def index
    query = current_account.<%= plural_table_name %>.order(created_at: :asc)
    query = query.search_by_q(params[:q]) if params[:q].present?

    @pagy, @records = pagy(query)

    @records.load
  end

  # GET <%= route_url %>/1 or <%= route_url %>/1.json
  def show
  end

  # GET <%= route_url %>/new
  def new
    @<%= singular_table_name %> = <%= orm_class.build(class_name) %>
  end

  # GET <%= route_url %>/1/edit
  def edit
  end

  # POST <%= route_url %> or <%= route_url %>.json
  def create
    @<%= singular_table_name %> = current_account.<%= plural_table_name %>.new(<%= singular_table_name %>_params)

    respond_to do |format|
      if @<%= orm_instance.save %>
        notice = t('.success')
        format.html { redirect_to <%= index_helper %>_url, notice: notice }
        format.json { render :show, status: :created, location: <%= "@#{singular_table_name}" %> }
        format.turbo_stream { flash.now.notice = notice }
      else
        format.html { render :new, status: :unprocessable_entity }
        format.json { render json: <%= "@#{orm_instance.errors}" %>, status: :unprocessable_entity }
      end
    end
  end

  # PATCH/PUT <%= route_url %>/1 or <%= route_url %>/1.json
  def update
    respond_to do |format|
      if @<%= orm_instance.update("#{singular_table_name}_params") %>
        notice = t('.success')
        format.html { redirect_to <%= index_helper %>_url, notice: notice }
        format.json { render :show, status: :ok, location: <%= "@#{singular_table_name}" %> }
        format.turbo_stream { flash.now.notice = notice }
      else
        format.html { render :edit, status: :unprocessable_entity }
        format.json { render json: <%= "@#{orm_instance.errors}" %>, status: :unprocessable_entity }
      end
    end
  end

  # DELETE <%= route_url %>/1 or <%= route_url %>/1.json
  def destroy
    @<%= orm_instance.destroy %>
    respond_to do |format|
      notice = t('.success')
      format.html { redirect_to <%= index_helper %>_url, notice: notice }
      format.json { head :no_content }
      format.turbo_stream { flash.now.notice = notice }
    end
  end

  private

  # Use callbacks to share common setup or constraints between actions.
  def set_<%= singular_table_name %>
    @<%= singular_table_name %> = current_account.<%= plural_table_name %>.find(params[:id])
  end

  # Only allow a list of trusted parameters through.
  def <%= "#{singular_table_name}_params" %>
    <%- if attributes_names.empty? -%>
    params.fetch(<%= ":#{singular_table_name}" %>, {})
    <%- else -%>
    params.require(<%= ":#{singular_table_name}" %>).permit(<%= permitted_params %>)
    <%- end -%>
  end
end
<% end -%>
